#!/usr/bin/env bash

user_home=$(eval echo ~${SUDO_USER})

flutter_repo="https://github.com/flutter/flutter"
flutter_channel="stable"
flutter_path="$user_home/sdk"
flutter_folder="$flutter_path/flutter"

raspi_home=$user_home/raspi-flutter/bin
kiosk_home=$user_home/kiosk

default_autostart="/etc/xdg/lxsession/LXDE-pi/autostart"
user_autostart_dir="$user_home/.config/lxsession/LXDE-pi/"
user_autostart="$user_home/.config/lxsession/LXDE-pi/autostart"


# List of dependency packages to install the flutter
dep_packages=("curl" "git" "unzip" "xz-utils" "zip" "libglu1-mesa")

# List of development packages to develop flutter app on linux
dev_packages=("clang" "cmake" "ninja-build" "pkg-config" "libgtk-3-dev" "liblzma-dev")

main(){
    # Check the number of command-line arguments
    if [ $# -eq 0 ]; then
        echo
        echo "You need to specify a Command:"
        echo
        help
        exit 1
    fi
    
    # Check for the command-line argument
    if [ "$1" == "help" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        help
        elif [ "$1" == "doctor" ]; then
        doctor
        elif [ "$1" == "install" ]; then
        install
        elif [ "$1" == "uninstall" ]; then
        uninstall
        elif [ "$1" == "kiosk" ]; then
        kiosk "$2"
        elif [ "$1" == "disable_kiosk" ]; then
        disable_kiosk 
        elif [ "$1" == "autologin" ]; then
        enable_autologin
        elif [ "$1" == "disable_autologin" ]; then
        disable_autologin
    else
        echo "Invalid argument: $1"
        help
        exit 1
    fi
}

help(){
    echo
    echo "Usage: $0 <command>"
    echo
    echo "Options:"
    echo "  help               : Show this help message"
    echo "  doctor             : Check all the steps"
    echo "  install            : Install Flutter "
    echo "  uninstall          : Uninstall Flutter "
    echo "  kiosk              : Run the app bundle in kiosk mode"
    echo "  disable_kiosk      : Disable the kiosk mode"
    echo "  autologin          : Enable the auto login"
    echo "  disable_autologin  : Disable the auto login"
    echo
    exit 1
}

doctor(){
    print_banner "Doctor summary:"
    echo
    echo "installation: "
    echo
    # Check dependency packages (curl, git, unzip, ...)
    echo " $(check_dep_packages && echo '✓' || echo '✘') | Linux Dependency packages | curl git unzip ..."
    show_dep_packages_state
    # Check Flutter folder
    echo " $(check_flutter_folder && echo '✓' || echo '✘' ) | Flutter folder is located in $flutter_folder."
    # Check Flutter command
    echo " $(check_flutter_in_path && echo '✓' || echo '✘') | Flutter command is defined in .bashrc file."
    echo " $(check_flutter_installed && echo '✓' || echo '✘') | Flutter command is available in the PATH."
    # Check Linux development packages (clang, cmake, ninja-build, ...)
    echo " $(check_dev_packages && echo '✓' || echo '✘') | Linux development packages | clang cmake ninja-build ..."
    show_dev_packages_state
    # Check Flutter channel
    echo " $(check_flutter_channel && echo '✓' || echo '✘') | Check flutter channel. should be $flutter_channel."
    
    
    echo
    echo "Kiosk Mode: "
    echo
    echo " $(check_autologin && echo '✓' || echo '✘') | Auto login is enabled in your device"
    echo " $(check_kiosk && echo '✓' || echo '✘') | Kiosk mode is enabled"
}

install() {
    print_banner "Installation Summary"
    echo
    echo "
        * Get Linux dependencies to be able to run the flutter: curl, git ,...
        * Clone the flutter from Github: $flutter_repo
        * move flutter to the $flutter_folder directory
        * update the path to make the flutter command excutable
        * Check and show the flutter path
        * add dependencies for developing on linux
        * change flutter channel to $flutter_channel
        * run flutter doctor
        * run flutter precache command for linux
    "
    echo
    
    print_banner "Flutter Linux Dependencies"
    if ! check_dep_packages; then
        install_packages "${dep_packages[@]}"
    else
        echo "Linux dependencies are already installed"
        show_dep_packages_state
    fi
    echo
    
    print_banner "Clone Flutter"
    if ! check_flutter_folder; then
        echo "Clone the flutter from Github: $flutter_repo"
        git clone $flutter_repo -b $flutter_channel
        
        sudo -E mv flutter $flutter_path/
        echo "Flutter moved to the $flutter_path directory"
    else
        echo "Flutter folder is already available in $flutter_folder"
    fi
    echo
    
    
    print_banner "Add Flutter to PATH"
    if ! check_flutter_in_path; then
        add_flutter_to_path
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi

    if ! check_flutter_installed; then
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi
    
    echo
    print_banner "Check Flutter Path"
    echo
    echo "Flutter is located at:"
    which flutter
    echo
    
    
    print_banner "Linux Development Dependencies"
    if ! check_dev_packages; then
        install_packages "${dev_packages[@]}"
        
        sudo -E apt install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
    else
        echo "Linux development dependencies are already installed"
        show_dev_packages_state
    fi
    echo
    
    
    print_banner "Check Flutter Channel"
    echo "change Flutter channel to $flutter_channel"
    if ! check_flutter_channel; then
        flutter channel $flutter_channel
    else
        echo "Flutter channel is already on $flutter_channel"
    fi
    echo
    
    print_banner "Flutter Doctor"
    flutter doctor -v
    echo
    
    print_banner "Flutter Precache"
    echo "run flutter precache command for linux"
    flutter precache --universal --linux
    echo
    
    echo "Flutter Linux GTK installed Successfully"
    echo
    print_banner "Final Checks:"
    doctor
}

uninstall() {
    print_banner "Uninstalling Flutter is not implemented yet"
}

kiosk(){
    if [ -z "$1" ]; then
        echo "
No path parameter provided.

Usage: kiosk <file_path>
to run the app bundle in kiosk mode you need to provide the exact path to the flutter app bundle
Example: kiosk /home/pi/app/build/linux/arm64/release/bundle/app

you can generate your file with the following command:

flutter build linux --release
        "
        echo
        return 1
    fi
    
    local app_path="$1"
    
    # Check if the provided path exists
    if [ ! -e "$app_path" ]; then
        echo "File or directory does not exist: $app_path"
        return 1
    fi
    
    # Check if the provided path is a regular file (not a directory)
    if [ ! -f "$app_path" ]; then
        echo "Not a regular file: $app_path"
        return 1
    fi
    
    # Check if the file is executable
    if [ -x "$app_path" ]; then
        echo "Provided File is a valid executable: $app_path"
    else
        echo "File is not executable: $app_path"
        return 1
    fi
    
    
    if ! check_autologin; then
        echo "Autologin is disabled we have to enable it."
        enable_autologin
    else
        echo "Autologin is already enabled"
    fi
    
    print_banner "Enable kiosk mode"
    
    # TODO: add kiosk dependencies like xset and xdotool
    
    # check $kiosk_home is available or not
    if [ ! -d "$kiosk_home" ]; then
        echo "Creating directory $kiosk_home."
        mkdir -p $kiosk_home
        echo
    else
        echo "The $kiosk_home directory is already available."
        echo
    fi
    
    
    local kiosk_file="$kiosk_home/kiosk.sh"
    
    # check if kiosk.sh file is available or not
    if [ -f "$kiosk_file" ]; then
        echo "remove current $kiosk_file file and create a new one."
        sudo -E rm $kiosk_file
        echo
    fi
    
    echo "Creating file $kiosk_file. from template"
    sudo -E cp $raspi_home/kiosk.sh $kiosk_home/
    echo
    
    echo "Add Application path to $kiosk_file file"
    # sed -i "s/# placeholder/$(echo "$app_path" | sed 's/\//\\\//g')\&/g" "$kiosk_file"
    sed -i "s/# placeholder/$(echo "$app_path" | sed 's/\//\\\//g') \&/g" "$kiosk_file"
    echo
    
    if [ ! -d "$user_autostart_dir" ]; then
        echo "Creating directory $user_autostart_dir."
        sudo -E mkdir -p $user_autostart_dir
        echo
    else
        echo "The $user_autostart_dir directory is already available."
        echo
    fi
    
    if [ -f "$user_autostart" ]; then
        echo "remove current $user_autostart file."
        sudo -E rm $user_autostart
        echo
    fi
    
    echo "Copy default autostart file to user autostart file"
    sudo -E cp $default_autostart $user_autostart_dir
    
    echo "Add following lines to the to user autostart file"
    echo "@bash $kiosk_file" | sudo tee -a $user_autostart
    echo "@sleep 5" | sudo tee -a $user_autostart
    echo "@xdotool key alt+F11" | sudo tee -a $user_autostart
    
    echo
}

disable_kiosk() {
    echo
    print_banner "Disable kiosk mode"
    
    
    if [ -f "$user_autostart" ]; then
        echo "remove current $user_autostart file"
        sudo -E rm $user_autostart
        echo
        echo "Kiosk mode has been disabled"
        echo
        sleep 3
        sudo -E reboot
    else
        echo "Kiosk mode is already disabled"
    fi
}

check_kiosk() {
    local kiosk_file="$kiosk_home/kiosk.sh"
    
    if [ -f "$user_autostart" ]; then
        # Check if the line exists in the file
        if grep -qF "@bash $kiosk_file" "$user_autostart"; then
            return 0
        fi
    fi
    
    return 1
}

enable_autologin() {
    
    print_banner "Enable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B4
    
    echo "Auto Login enabled successfully"
}

disable_autologin() {
    print_banner "Disable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B3
    echo "Auto Login disabled successfully"
}

check_autologin() {
    return $(sudo -E raspi-config nonint get_autologin)
}

print_banner() {
    local message="${1:-Banner:}"
    local width=40  # Adjust the width of the banner as needed
    local border_char="*"
    
    # Calculate the padding length
    local padding_length=$((($width - ${#message}) / 2))
    
    
    # Create the middle part of the banner
    local middle_banner=""
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done
    middle_banner+=" $message "
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done
    
    # Create the top border
    local border=""
    for ((i = 0; i < (${#middle_banner}); i++)); do
        border+="$border_char"
    done
    
    # Print the banner
    echo "$border"
    echo "$middle_banner"
    echo "$border"
}


check_dep_packages() {
    all_installed=0 # Success (true)
    
    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break  # No need to check further once one package is not installed
        fi
    done
    
    return $all_installed
}

show_dep_packages_state(){
    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            echo "    * ✘ $package is missing"
        else
            echo "    * ✓ $package is installed"
        fi
    done
    
    return $all_installed
}

check_dev_packages() {
    # List of packages to check
    
    all_installed=0 # Success (true)
    
    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break  # No need to check further once one package is not installed
        fi
    done
    
    return $all_installed
}

show_dev_packages_state(){
    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            echo "    * ✘ $package is missing"
        else
            echo "    * ✓ $package is installed"
        fi
    done
    
    return $all_installed
}

# Function to install packages
install_packages() {
    local packages=("$@")
    
    # Check if the argument is an array
    if [[ ! "$(declare -p packages 2>/dev/null)" =~ "declare -a" ]]; then
        echo "Error: Argument is not an array."
        return 1
    fi
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No packages provided."
        return 0
    fi
    
    # Combine all package names into a single string
    local package_list="${packages[*]}"
    
    # Install all packages in one command
    sudo -E apt install -y $package_list
}

check_flutter_folder() {
    [ -e "$flutter_folder/bin/flutter" ]
    return $?
}

check_flutter_installed(){
    which flutter >/dev/null 2>&1
    return $?
}

check_flutter_in_path(){
    if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
        return 0
    else
        return 1
    fi
}

add_flutter_to_path(){
    if [ "$user_home" != "$HOME" ]; then
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
            echo "we have flutter as env in ~/.bashrc."
        else
            echo "adding flutter to PATH as env in ~/.bashrc."
            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >> $user_home/.bashrc
            source $user_home/.bashrc
        fi
    else
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$HOME/.bashrc"; then
            echo "we have flutter as env in ~/.bashrc."
        else
            echo "adding flutter to PATH as env in ~/.bashrc."
            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >> $HOME/.bashrc
            source $HOME/.bashrc
        fi
    fi
}

check_flutter_channel() {
    if which flutter >/dev/null 2>&1; then
        if flutter channel | grep -q "* $flutter_channel"; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

main "$@"