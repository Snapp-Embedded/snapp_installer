#!/usr/bin/env bash

# Set a global variable for the script's name
script_name=$(basename "$0")

user_home=$(eval echo ~${SUDO_USER})

flutter_repo="https://github.com/flutter/flutter"
flutter_channel="stable"
flutter_path="$user_home/sdk"
flutter_folder="$flutter_path/flutter"

snapp_home=$user_home/snapp_installer/bin
kiosk_home=$user_home/kiosk
kiosk_file="$kiosk_home/kiosk.sh"

# X11 kiosk mode files
default_autostart="/etc/xdg/lxsession/LXDE-pi/autostart"
user_autostart_dir="$user_home/.config/lxsession/LXDE-pi/"
user_autostart="$user_home/.config/lxsession/LXDE-pi/autostart"

# Wayland kiosk mode files
wayland_user_autostart="$user_home/.config/wayfire.ini"

# List of dependency packages to install the flutter
dep_packages=("curl" "git" "unzip" "xz-utils" "zip" "libglu1-mesa")

# List of development packages to develop flutter app on linux
dev_packages=("clang" "cmake" "ninja-build" "pkg-config" "libgtk-3-dev" "liblzma-dev")

# TODO: add unclutter if needed
# List of dependency packages for the kiosk mode
kiosk_packages=("x11-xserver-utils" "xdotool")

# Options:

# -q, --quiet : Run in quiet mode
quiet_mode=0 # Default to verbose mode

# -v, --version : Specify the version of Flutter to install
# Example:
# snapp_installer install -v 3.19.0
flutter_version=""

main() {
    # Check the number of command-line arguments
    if [ $# -eq 0 ]; then
        log_error
        log_error "You need to specify a Command:"
        log_error
        help
        exit 1
    fi

    # Check for the command-line argument
    if [ "$1" == "help" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        help
    elif [ "$1" == "doctor" ]; then
        doctor
    elif [ "$1" == "install" ]; then
        install
    elif [ "$1" == "uninstall" ]; then
        uninstall
    elif [ "$1" == "kiosk" ]; then
        kiosk "$2"
    elif [ "$1" == "disable_kiosk" ]; then
        disable_kiosk
    elif [ "$1" == "autologin" ]; then
        enable_autologin
    elif [ "$1" == "disable_autologin" ]; then
        disable_autologin
    elif [ "$1" == "enable_fullscreen" ]; then
        enable_flutter_project_fullscreen
    else
        log "Invalid argument: $1"
        help
        exit 1
    fi
}

help() {
    log "Usage: $script_name [command] [options]"
    log ""
    log "Commands:"
    log "  help               : Display this help message."
    log "  doctor             : Check your environment for Flutter dependencies."
    log "  install            : Install Flutter. Optionally specify a version with -v."
    log "  uninstall          : Uninstall Flutter."
    log "  kiosk              : Run the app bundle in kiosk mode"
    log "  disable_kiosk      : Disable the kiosk mode"
    log "  autologin          : Enable the auto login"
    log "  disable_autologin  : Disable the auto login"
    # Add other commands here
    log ""
    log "Options:"
    log "  -v, --version [version]  Specify the Flutter version to install (e.g., -v 3.19.0)."
    log "                           Use with 'install' command."
    log "  -q, --quiet              Enable quiet mode, minimizing output."
    log ""
    log "Examples:"
    log "  $script_name install -v 3.19.0     Install Flutter version 3.19.0."
    log "  $script_name uninstall             Uninstall Flutter."
    log "  $script_name doctor                Run the Flutter doctor command."
    log ""
    log ""
}

doctor() {
    print_banner "Doctor summary:"
    log
    log "Installation: "
    log
    # Check dependency packages (curl, git, unzip, ...)
    log " $(check_dep_packages && log '✓' || log '✘') | Linux Dependency packages | curl git unzip ..."
    show_dep_packages_state
    # Check Flutter folder
    log " $(check_flutter_folder && log '✓' || log '✘') | Flutter folder is located in $flutter_folder."
    # Check Flutter command
    log " $(check_flutter_in_path && log '✓' || log '✘') | Flutter command is defined in .bashrc file."
    log " $(check_flutter_installed && log '✓' || log '✘') | Flutter command is available in the PATH."
    # Check Linux development packages (clang, cmake, ninja-build, ...)
    log " $(check_dev_packages && log '✓' || log '✘') | Linux development packages | clang cmake ninja-build ..."
    show_dev_packages_state

    log
    log "Kiosk Mode: $(current_display_manager)"
    log

    if [ "$(current_display_manager)" == "wayland" ]; then
        log " $(check_autologin && log '✓' || log '✘') | Auto login is enabled in your device"
        log " $(check_kiosk && log '✓' || log '✘') | Kiosk mode is enabled"
    else
        log " $(check_autologin && log '✓' || log '✘') | Auto login is enabled in your device"
        log " $(check_kiosk && log '✓' || log '✘') | Kiosk mode is enabled"
        log " $(check_kiosk_packages && log '✓' || log '✘') | Kiosk mode packages | xset xdotool ..."
        show_kiosk_packages_state
    fi

    if [ -f "pubspec.yaml" ]; then
        log
        log "Flutter Project:"
        log
        log " $(is_flutter_project_fullscreen && echo '✓' || echo '✘') | Fullscreen is enabled in your Flutter project"
    fi
}

install() {
    print_banner "Installation Summary"
    log
    log "
* Get Linux dependencies to be able to run the flutter: curl, git ,...
* Clone the flutter from Github: $flutter_repo
* move flutter to the $flutter_folder directory
* update the path to make the flutter command excutable
* Check and show the flutter path
* add dependencies for developing on linux
* check the flutter channel
* run flutter doctor
* run flutter precache command for linux
    "
    log
    log

    if [ -n "$flutter_version" ]; then
        log "Version option specified."
        log "Installing Flutter version: $flutter_version"
    else
        log "Version option not specified."
        log "Installing the latest version of Flutter on the $flutter_channel channel."
    fi
    log
    log

    set -e

    print_banner "Flutter Linux Dependencies"
    if ! check_dep_packages; then
        install_packages "${dep_packages[@]}"
    else
        log "Linux dependencies are already installed"
        show_dep_packages_state
    fi
    log

    print_banner "Clone Flutter"
    if ! check_flutter_folder; then
        # Use flutter_version if set; otherwise, use flutter_channel
        git_branch=${flutter_version:-$flutter_channel}

        log "Clone the $git_branch branch of the Flutter repository from GitHub"
        log

        # The git clone command using conditional logic for branch name
        if git clone "$flutter_repo" -b "$git_branch"; then
            log "Flutter cloned successfully."
        else
            log_error "Error cloning Flutter."
            exit 1
        fi

        if [ ! -d "$flutter_path" ]; then
            mkdir -p "$flutter_path"
        fi

        sudo -E mv flutter "$flutter_path"
        log "Flutter moved to the $flutter_path directory"
    else
        log "Flutter folder is already available in $flutter_folder"
    fi
    log

    print_banner "Add Flutter to PATH"
    if ! check_flutter_in_path; then
        add_flutter_to_path
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi

    if ! check_flutter_installed; then
        log "Add Flutter to PATH for this session"
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi

    log
    print_banner "Check Flutter Path"
    log
    log "Flutter is located at:"
    which flutter
    log

    print_banner "Linux Development Dependencies"
    if ! check_dev_packages; then
        install_packages "${dev_packages[@]}"
    else
        log "Linux development dependencies are already installed"
        show_dev_packages_state
    fi
    log

    print_banner "Check Flutter Channel"
    log "Checking Flutter channel"
    log
    flutter channel
    log

    print_banner "Flutter Doctor"
    flutter doctor -v
    log

    print_banner "Flutter Precache"
    log "run flutter precache command for linux"
    flutter precache --universal --linux
    log

    log "Flutter Linux GTK installed Successfully"
    log
    print_banner "Final Checks:"
    doctor
    log

    print_seperator

    log
    log
    log "Flutter installation has been completed"
    log

    log_verbose "To be able to use it, you should restart your terminal  "
    log_verbose "Or you can enter the following command: "
    log_verbose
    log_verbose "source ~/.bashrc"
    log_verbose
    log_verbose

}

uninstall() {
    print_banner "Uninstallation Summary"
    log
    log "
* Remove the Flutter directory: $flutter_folder
* Update the PATH to remove the Flutter executable
    "
    log

    set -e

    print_banner "Remove Flutter Directory"
    if [ -d "$flutter_folder" ]; then
        log "Removing Flutter from $flutter_folder"
        sudo rm -rf "$flutter_folder"
        log "Flutter has been removed."
    else
        log "Flutter directory not found. Assuming Flutter is not installed."
    fi
    log

    log "Updating PATH to remove Flutter"
    local path_pattern="export PATH=\"\$PATH:$flutter_folder/bin\""

    # Use sed to delete the line matching the exact pattern from .bashrc
    # Note: Using "|" as delimiter in sed to avoid escaping issues with "/"
    if grep -qF -- "$path_pattern" "$user_home/.bashrc"; then
        sed -i "\|$path_pattern|d" "$user_home/.bashrc"
        log "Flutter PATH entry removed from .bashrc."
    else
        log "No specific Flutter PATH entry found in .bashrc."
    fi
    log

    log "Flutter has been uninstalled."
    log

    log_verbose "Please restart your terminal or source your .bashrc file to refresh your environment."
    log_verbose "source $user_home/.bashrc"
    log_verbose

    print_seperator
}

kiosk() {
    set -e

    log
    log

    local possible_path=""

    # Check if the user provided a path to the executable file
    # If not, try to find if the user is in a flutter project
    # If the user is in a flutter project, try to find the executable file in the build folder
    if [ -z "$1" ]; then
        log "Excutable file path not provided".
        log

        # Check if the user is in a flutter project
        if [ -f "pubspec.yaml" ]; then
            log "It seems you are in the root of a flutter project."
            log

            # Check for the executable file with the same name as the current folder
            current_folder_name=$(basename "$PWD")

            local rebuild_excutable=1

            # Check if the current flutter project has fullscreen enabled in wayland
            if ! is_flutter_project_fullscreen && [ "$(current_display_manager)" == "wayland" ]; then
                log "In the newest version of the Raspberry Pi OS, you have Wayland as the default display manager."
                log "With Wayland, you can not run the app in fullscreen mode."
                log "You should enable fullscreen in your Flutter project in my_application.cc file."
                log

                read -p "Do you want to enable fullscreen in your Flutter project? (y/n): " choice

                if [ "$choice" = "y" ]; then
                    enable_flutter_project_fullscreen
                    log
                    rebuild_excutable=0
                else
                    log "Operation canceled."
                    log
                fi
            fi

            # If we need to rebuild linux app bundle we will ask it from user
            if [ $rebuild_excutable == 0 ]; then
                log "We changed your Flutter project full screen mode."

                read -p "Do you want to rebuild your Flutter project? (y/n): " choice

                if [ "$choice" = "y" ]; then
                    flutter build linux --release

                    log "Rebuild completed."
                    log
                else
                    log "Operation canceled."
                    log
                    exit 1
                fi
            fi

            # Find the executable file in the build folder
            executable_path=$(find . -path "./build/linux/*/release/bundle/$current_folder_name" -type f -executable)

            if [ -x "$executable_path" ]; then
                log "Found an executable file: $executable_path"
                log
                # Prompt the user for confirmation
                read -p "Do you want to use this executable file? (y/n): " choice

                if [ "$choice" = "y" ]; then
                    possible_path=$executable_path
                else
                    log_error "Operation canceled."
                    log_error
                    exit 1
                fi
            else
                log "Could not find an executable file in the build folder."
                log

                read -p "Do you want to build your Flutter project? (y/n): " choice

                if [ "$choice" = "y" ]; then
                    flutter build linux --release

                    log "Rebuild completed."
                    log
                    executable_path=$(find . -path "./build/linux/*/release/bundle/$current_folder_name" -type f -executable)
                    possible_path=$executable_path

                else
                    log_error "Operation canceled."
                    log_error
                    exit 1
                fi
            fi
        fi
    else
        possible_path="$1"
    fi

    if [ -z "$possible_path" ]; then

        log "
You should provide path to a excutable file or run this command in a flutter project.

Usage: kiosk <file_path>
to run the app bundle in kiosk mode you need to provide the exact path to the flutter app bundle
Example: kiosk /home/pi/app/build/linux/arm64/release/bundle/app

you can generate your file with the following command:

flutter build linux --release
        "

        return 1
    fi

    local app_path=$possible_path

    if ! is_executable_file_valid "$app_path"; then
        return 1
    fi

    # Use realpath to get the absolute path
    absolute_path=$(realpath "$app_path")

    log "Provided File is a valid path: $app_path"

    # Check if the file is absolute path
    # If not, try to replace the relative path with the absolute path
    if [ "$absolute_path" != "$app_path" ]; then
        log "But its not absolute path"
        log "Try to replace the relative path with the absolute path"
        log
        if ! is_executable_file_valid "$absolute_path"; then
            log "The absolute path is not valid: $absolute_path"
            return 1
        fi
        app_path="$absolute_path"
        log "New path for the excutable file: $app_path"
    fi
    log

    print_seperator

    if ! check_autologin; then
        log "Autologin is disabled we have to enable it."
        enable_autologin
    else
        log "Autologin is already enabled"
    fi

    print_banner "Enable kiosk mode"

    if ! check_kiosk_packages; then
        log "Install kiosk packages"
        install_packages "${kiosk_packages[@]}"
    else
        log "Linux development dependencies are already installed"
        show_kiosk_packages_state
    fi
    log

    # check $kiosk_home is available or not
    if [ ! -d "$kiosk_home" ]; then
        log "Creating a kiosk directory in home "
        mkdir -p $kiosk_home
        log
    else
        log "The kiosk directory is already available in home."
        log
    fi

    # check if kiosk.sh file is available or not
    if [ -f "$kiosk_file" ]; then
        log "remove current kiosk.sh file and create a new one."
        sudo -E rm $kiosk_file
        log
    fi

    log "Creating file kiosk.sh file from template"
    sudo -E cp $snapp_home/kiosk.sh $kiosk_home/
    log

    log "Add Application path to kiosk.sh file"
    sed -i "s/# placeholder/$(log "$app_path" | sed 's/\//\\\//g') \&/g" "$kiosk_file"
    log

    print_seperator

    # check if the os is using x11 or wayland
    if [ "$(current_display_manager)" == "wayland" ]; then
        log "Setup wayland kiosk mode"
        log
        setup_wayland_kiosk "$kiosk_file"
    else
        log "Setup X11 kiosk mode"
        log
        setup_x11_kiosk "$kiosk_file"
    fi

    print_seperator

    log
    log
    log_verbose "Kiosk mode has been enabled"
    log_verbose "Reboot your device to see the changes"
    log_verbose
    log_verbose
    log_verbose
}

disable_kiosk() {
    log
    print_banner "Disable kiosk mode"

    # check if the os is using x11 or wayland
    if [ "$(current_display_manager)" == "wayland" ]; then
        log "Disable wayland kiosk mode"
        log

        local kiosk_command="snapp_kiosk=bash $kiosk_file && sleep 5"

        log "kiosk command: $kiosk_command"

        local file="$wayland_user_autostart"

        # if kiosk command is in the file just remove it
        if grep -qF "$kiosk_command" "$file"; then
            log "remove kiosk command from $file"
            sed -i "\|$kiosk_command|d" "$file"
            log
            log "Kiosk mode has been disabled"
            log
        else
            log "Kiosk mode is already disabled"
        fi
    else
        log "Disable X11 kiosk mode"
        log
        if [ -f "$user_autostart" ]; then
            log "remove current $user_autostart file"
            sudo -E rm $user_autostart
            log
            log "Kiosk mode has been disabled"
            log
            sleep 3
            sudo -E reboot
        else
            log "Kiosk mode is already disabled"
        fi
    fi

    sleep 3
    sudo -E reboot
}

check_kiosk() {
    local kiosk_file="$kiosk_home/kiosk.sh"

    if [ "$(current_display_manager)" == "wayland" ]; then
        local kiosk_command="snapp_kiosk=bash $kiosk_file && sleep 5"

        local file="$wayland_user_autostart"

        # if kiosk command is in the file just remove it
        if grep -qF "$kiosk_command" "$file"; then
            return 0
        else
            return 1
        fi
    else
        if [ -f "$user_autostart" ]; then
            # Check if the line exists in the file
            if grep -qF "@bash $kiosk_file" "$user_autostart"; then
                return 0
            fi
        fi
    fi

    return 1
}

enable_autologin() {

    print_banner "Enable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B4

    log "Auto Login enabled successfully"
}

disable_autologin() {
    print_banner "Disable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B3
    log "Auto Login disabled successfully"
}

check_autologin() {
    return "$(sudo -E raspi-config nonint get_autologin)"
}

# Log function for standard logging
log() {
    echo "$@"
}

# Log function for error logging
log_error() {
    echo "$@" >&2
}

# Conditional log function that checks if quiet mode is active
log_verbose() {
    if [[ $quiet_mode -eq 0 ]]; then
        log "$@"
    fi
}

print_banner() {
    local message="${1:-Banner:}"
    local width=40 # Adjust the width of the banner as needed
    local border_char="*"

    # Calculate the padding length
    local padding_length=$((($width - ${#message}) / 2))

    # Create the middle part of the banner
    local middle_banner=""
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done
    middle_banner+=" $message "
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done

    # Create the top border
    local border=""
    for ((i = 0; i < (${#middle_banner}); i++)); do
        border+="$border_char"
    done

    # Print the banner
    log "$border"
    log "$middle_banner"
    log "$border"
}

print_seperator() {
    local width=40 # Adjust the width of the banner as needed
    local border_char="*"

    log
    # prints $border_char $width times
    for ((i = 0; i <= width; i++)); do
        log -n "*"
    done
    log
    log
}

check_dep_packages() {
    local all_installed=0 # Success (true)

    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break           # No need to check further once one package is not installed
        fi
    done

    return $all_installed
}

show_dep_packages_state() {
    local all_installed=0 # Success (true)

    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            log "    * ✘ $package is missing"
        else
            log "    * ✓ $package is installed"
        fi
    done

    return $all_installed
}

is_executable_file_valid() {
    local file_path="$1"

    # Check if the provided path exists
    if [ ! -e "$file_path" ]; then
        log "File or directory does not exist: $file_path"
        return 1
    fi

    # Check if the provided path is a regular file (not a directory)
    if [ ! -f "$file_path" ]; then
        log "Not a regular file: $file_path"
        return 1
    fi

    # Check if the file is executable
    if [ ! -x "$file_path" ]; then
        log "File is not executable: $file_path"
        return 1
    fi

    return 0
}

check_dev_packages() {
    # List of packages to check

    local all_installed=0 # Success (true)

    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break           # No need to check further once one package is not installed
        fi
    done

    return $all_installed
}

show_dev_packages_state() {
    local all_installed=0
    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            log "    * ✘ $package is missing"
        else
            log "    * ✓ $package is installed"
        fi
    done

    return $all_installed
}

check_kiosk_packages() {

    local all_installed=0 # Success (true)

    for package in "${kiosk_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break           # No need to check further once one package is not installed
        fi
    done

    return $all_installed
}

show_kiosk_packages_state() {
    local all_installed=0 # Success (true)

    for package in "${kiosk_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            log "    * ✘ $package is missing"
        else
            log "    * ✓ $package is installed"
        fi
    done

    return $all_installed
}

current_display_manager() {
    # we can find the display manager by this command
    # loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type
    local display_manager=""

    display_manager=$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type)

    # if the display manager variable contains the word "x11" then the display manager is x11
    if [[ $display_manager == *"x11"* ]]; then
        log "x11"
    elif [[ $display_manager == *"wayland"* ]]; then
        log "wayland"
    else
        log "unknown"
    fi
}

# Function to check if fullscreen is enabled in the Flutter project
# It checks if the file contains the definition of gtk_window_fullscreen
is_flutter_project_fullscreen() {
    # Specify the file path
    local file_path="./linux/my_application.cc"

    # Check if the file exists
    if [ -f "$file_path" ]; then
        # Use grep to check if the file contains the definition of gtk_window_fullscreen
        if grep -q "gtk_window_fullscreen" "$file_path"; then
            return 0
        else
            return 1
        fi
    else
        log "File does not exist: $file_path"
        return 1
    fi
}

# Function to enable fullscreen in the Flutter project
# It adds the definition of gtk_window_fullscreen to the file
enable_flutter_project_fullscreen() {
    if [ ! -f "pubspec.yaml" ]; then
        log "You can only use this command in a Flutter project."
        log "Could not find pubspec.yaml file."
        return 1
    fi

    if ! is_flutter_project_fullscreen; then
        log
        log "Enable fullscreen in your Flutter project"
        log "Add Fullscreen command to my_application.cc file"
        log

        local file_path="./linux/my_application.cc"
        local fullscreen_command="gtk_window_fullscreen(GTK_WINDOW(window));"

        if [ -f "$file_path" ]; then
            # Use sed to replace specific line with fullscreen command
            sed -i 's/^\(\s*\)gtk_window_set_default_size.*/\1'"$fullscreen_command"'/' "$file_path"

            log "Fullscreen enabled in $file_path"
        else
            log "File $file_path not found."
        fi
    else
        log "Fullscreen is already enabled in your Flutter project"
    fi

}

setup_wayland_kiosk() {
    local kiosk_file="$1"

    local file="$wayland_user_autostart"

    # Check if the [wm-actions] section exists in the file
    if ! grep -q "\[wm-actions\]" "$file"; then
        # If it doesn't exist, add the section and the desired lines
        echo "[wm-actions]" >>"$file"

        echo "toggle_fullscreen = <alt> KEY_F11" >>"$file"

        echo >>"$file" # Adding a blank line after the new entry

        log "Added [wm-actions] section and toggle_fullscreen entry to $file"
    else
        # If the section already exists, check if the line is present
        if ! grep -q "\[wm-actions\]" "$file" || ! grep -q "toggle_fullscreen = <alt> KEY_F11" "$file"; then
            # If the line is not present or section is misplaced, add it to the existing [wm-actions] section
            sed -i '/^\[wm-actions\]/a toggle_fullscreen = <alt> KEY_F11\n' "$file"
            log "Added toggle_fullscreen entry to the existing [wm-actions] section in $file"
        else
            log "toggle_fullscreen entry already exists in [wm-actions] section in $file"
        fi
    fi

    local kiosk_command="snapp_kiosk=bash $kiosk_file && sleep 5"

    # Check if the line exists in the file
    # and if it does, then do not add it again
    if grep -qF "[autostart]" "$file" && grep -qF "$kiosk_command" "$file"; then
        log "kiosk mode is already available in $file"
        return 0
    fi

    # Check if the [autostart] section exists in the file
    if ! grep -q "\[autostart\]" "$file"; then
        # If it doesn't exist, add the section and the desired lines
        echo "[autostart]" >>"$file"
        echo "snapp_kiosk=bash $kiosk_file && sleep 5" >>"$file"
        echo >>"$file" # Adding a blank line after the new entry

        log "Added [autostart] section and snapp_kiosk entry to $file"
    else
        # If the section already exists, check if the line is present
        if ! grep -q "\[autostart\]" "$file" || ! grep -q "snapp_kiosk=bash $kiosk_file && sleep 5" "$file"; then
            # If the line is not present or section is misplaced, add it to the existing [autostart] section
            sed -i "/^\[autostart\]/a snapp_kiosk=bash $kiosk_file && sleep 5\n" "$file"
            log "Added snapp_kiosk entry to the existing [autostart] section in $file"
        else
            log "snapp_kiosk entry already exists in [autostart] section in $file"
        fi
    fi
}

setup_x11_kiosk() {
    local kiosk_file="$1"

    if [ ! -d "$user_autostart_dir" ]; then
        log "Creating directory $user_autostart_dir"
        sudo -E mkdir -p $user_autostart_dir
        log
    fi

    if [ -f "$user_autostart" ]; then
        log "remove current user LXDE-pi/autostart file."
        sudo -E rm $user_autostart
        log
    fi

    log "Copy default autostart file to user autostart file"
    sudo -E cp $default_autostart $user_autostart_dir

    log "Add following lines to the to user autostart file"
    log "@bash $kiosk_file" | sudo tee -a $user_autostart
    log "@sleep 5" | sudo tee -a $user_autostart
    log "@xdotool key alt+F11" | sudo tee -a $user_autostart

}

# Function to install packages
install_packages() {
    local packages=("$@")

    # Update apt-get
    sudo -E apt update -y

    # Check if the argument is an array
    if [[ ! "$(declare -p packages 2>/dev/null)" =~ "declare -a" ]]; then
        log "Error: Argument is not an array."
        return 1
    fi

    if [ ${#packages[@]} -eq 0 ]; then
        log "No packages provided."
        return 0
    fi

    # Combine all package names into a single string
    local package_list="${packages[*]}"

    # Install all packages in one command
    sudo -E apt install -y $package_list
}

check_flutter_folder() {
    [ -e "$flutter_folder/bin/flutter" ]
    return $?
}

check_flutter_installed() {
    which flutter >/dev/null 2>&1
    return $?
}

check_flutter_in_path() {
    if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
        return 0
    else
        return 1
    fi
}

add_flutter_to_path() {
    if [ "$user_home" != "$HOME" ]; then
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
            log "we have flutter as env in ~/.bashrc."
        else
            log "adding flutter to PATH as env in $user_home/.bashrc."

            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >>$user_home/.bashrc
            source $user_home/.bashrc
        fi
    else
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$HOME/.bashrc"; then
            log "we have flutter as env in $HOME/.bashrc."
        else
            log "adding flutter to PATH as env in ~/.bashrc."

            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >>$HOME/.bashrc
            source $HOME/.bashrc
        fi
    fi
}

check_flutter_channel() {
    if which flutter >/dev/null 2>&1; then
        if flutter channel | grep -q "* $flutter_channel"; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Function to validate version format
validate_version() {
    local version="$1"
    local regex='^[0-9]+\.[0-9]+\.[0-9]+$' # Pattern for major.minor.patch

    if [[ $version =~ $regex ]]; then
        return 0
    else
        log_error
        log_error "Provided version is invalid: $version"
        log_error "Version should be in the format: major.minor.patch"
        log_error
        log_error "Example: 3.19.0"
        log_error
        # Version is invalid, return 1 (failure)
        return 1
    fi
}

# Function to parse command-line arguments
# It sets the global variables based on the provided arguments
parse_arguments() {
    quiet_mode=0       # Reset quiet mode
    flutter_version="" # Reset version

    ARGS=() # Initialize an array to hold the processed arguments
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet_mode=1
            shift # Remove this argument
            ;;
        -v | --version)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                if validate_version "$2"; then
                    flutter_version="$2"
                    shift # Remove the version value
                else
                    exit 1
                fi
            else
                log_error
                log_error "Argument is missing: -v, --version requires a value."
                log_error
                log_error "Example: $script_name install -v 3.19.0"
                log_error
                exit 1
            fi
            shift # Remove the version flag
            ;;
        *) # Preserve other arguments
            ARGS+=("$1")
            shift
            ;;
        esac
    done
    set -- "${ARGS[@]}" # Set the remaining arguments back
}

# Call parse_arguments at the start, replacing the pre-existing pre-process section
parse_arguments "$@"

main "$@"
