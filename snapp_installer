#!/usr/bin/env bash

user_home=$(eval echo ~${SUDO_USER})

flutter_repo="https://github.com/flutter/flutter"
flutter_channel="stable"
flutter_path="$user_home/sdk"
flutter_folder="$flutter_path/flutter"

snapp_home=$user_home/snapp_installer/bin
kiosk_home=$user_home/kiosk
kiosk_file="$kiosk_home/kiosk.sh"

# X11 kiosk mode files
default_autostart="/etc/xdg/lxsession/LXDE-pi/autostart"
user_autostart_dir="$user_home/.config/lxsession/LXDE-pi/"
user_autostart="$user_home/.config/lxsession/LXDE-pi/autostart"

# Wayland kiosk mode files
wayland_user_autostart="$user_home/.config/wayfire.ini"

# List of dependency packages to install the flutter
dep_packages=("curl" "git" "unzip" "xz-utils" "zip" "libglu1-mesa")

# List of development packages to develop flutter app on linux
dev_packages=("clang" "cmake" "ninja-build" "pkg-config" "libgtk-3-dev" "liblzma-dev")

# TODO: add unclutter if needed
# List of dependency packages for the kiosk mode
kiosk_packages=("x11-xserver-utils" "xdotool")

main(){
    # Check the number of command-line arguments
    if [ $# -eq 0 ]; then
        echo
        echo "You need to specify a Command:"
        echo
        help
        exit 1
    fi
    
    # Check for the command-line argument
    if [ "$1" == "help" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        help
        elif [ "$1" == "doctor" ]; then
        doctor
        elif [ "$1" == "install" ]; then
        install
        elif [ "$1" == "uninstall" ]; then
        uninstall
        elif [ "$1" == "kiosk" ]; then
        kiosk "$2"
        elif [ "$1" == "disable_kiosk" ]; then
        disable_kiosk
        elif [ "$1" == "autologin" ]; then
        enable_autologin
        elif [ "$1" == "disable_autologin" ]; then
        disable_autologin
        elif [ "$1" == "enable_fullscreen" ]; then
        enable_flutter_project_fullscreen
    else
        echo "Invalid argument: $1"
        help
        exit 1
    fi
}

help(){
    echo
    echo "Usage: $0 <command>"
    echo
    echo "Options:"
    echo "  help               : Show this help message"
    echo "  doctor             : Check all the steps"
    echo "  install            : Install Flutter "
    echo "  uninstall          : Uninstall Flutter "
    echo "  kiosk              : Run the app bundle in kiosk mode"
    echo "  disable_kiosk      : Disable the kiosk mode"
    echo "  autologin          : Enable the auto login"
    echo "  disable_autologin  : Disable the auto login"
    echo "  enable_fullscreen  : Enable fullscreen in your Flutter project"
    echo
    exit 1
}

doctor(){
    print_banner "Doctor summary:"
    echo
    echo "Installation: "
    echo
    # Check dependency packages (curl, git, unzip, ...)
    echo " $(check_dep_packages && echo '✓' || echo '✘') | Linux Dependency packages | curl git unzip ..."
    show_dep_packages_state
    # Check Flutter folder
    echo " $(check_flutter_folder && echo '✓' || echo '✘' ) | Flutter folder is located in $flutter_folder."
    # Check Flutter command
    echo " $(check_flutter_in_path && echo '✓' || echo '✘') | Flutter command is defined in .bashrc file."
    echo " $(check_flutter_installed && echo '✓' || echo '✘') | Flutter command is available in the PATH."
    # Check Linux development packages (clang, cmake, ninja-build, ...)
    echo " $(check_dev_packages && echo '✓' || echo '✘') | Linux development packages | clang cmake ninja-build ..."
    show_dev_packages_state
    # Check Flutter channel
    echo " $(check_flutter_channel && echo '✓' || echo '✘') | Check flutter channel. should be $flutter_channel."
    
    
    echo
    echo "Kiosk Mode: $(current_display_manager)"
    echo
    
    if [ "$(current_display_manager)" == "wayland" ]; then
        echo " $(check_autologin && echo '✓' || echo '✘') | Auto login is enabled in your device"
        echo " $(is_flutter_project_fullscreen && echo '✓' || echo '✘') | Fullscreen is enabled in your Flutter project"
    else
        echo " $(check_autologin && echo '✓' || echo '✘') | Auto login is enabled in your device"
        echo " $(check_kiosk && echo '✓' || echo '✘') | Kiosk mode is enabled"
        echo " $(check_kiosk_packages && echo '✓' || echo '✘') | Kiosk mode packages | xset xdotool ..."
        show_kiosk_packages_state
    fi
}

install() {
    print_banner "Installation Summary"
    echo
    echo "
* Get Linux dependencies to be able to run the flutter: curl, git ,...
* Clone the flutter from Github: $flutter_repo
* move flutter to the $flutter_folder directory
* update the path to make the flutter command excutable
* Check and show the flutter path
* add dependencies for developing on linux
* change flutter channel to $flutter_channel
* run flutter doctor
* run flutter precache command for linux
    "
    echo
    
    set -e
    
    print_banner "Flutter Linux Dependencies"
    if ! check_dep_packages; then
        install_packages "${dep_packages[@]}"
    else
        echo "Linux dependencies are already installed"
        show_dep_packages_state
    fi
    echo
    
    print_banner "Clone Flutter"
    if ! check_flutter_folder; then
        echo "Clone the flutter from Github: $flutter_repo"
        git clone $flutter_repo -b $flutter_channel
        
        if [ ! -d "$flutter_path" ]; then
            mkdir -p "$flutter_path"
        fi
        
        sudo -E mv flutter $flutter_path
        echo "Flutter moved to the $flutter_path directory"
    else
        echo "Flutter folder is already available in $flutter_folder"
    fi
    echo
    
    
    print_banner "Add Flutter to PATH"
    if ! check_flutter_in_path; then
        add_flutter_to_path
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi
    
    if ! check_flutter_installed; then
        echo "Add Flutter to PATH for this session"
        eval "$(cat $user_home/.bashrc | tail -n +10)"
        export PATH="$PATH:$flutter_folder/bin"
    fi
    
    echo
    print_banner "Check Flutter Path"
    echo
    echo "Flutter is located at:"
    which flutter
    echo
    
    
    print_banner "Linux Development Dependencies"
    if ! check_dev_packages; then
        install_packages "${dev_packages[@]}"
    else
        echo "Linux development dependencies are already installed"
        show_dev_packages_state
    fi
    echo
    
    
    print_banner "Check Flutter Channel"
    echo "change Flutter channel to $flutter_channel"
    if ! check_flutter_channel; then
        flutter channel $flutter_channel
    else
        echo "Flutter channel is already on $flutter_channel"
    fi
    echo
    
    print_banner "Flutter Doctor"
    flutter doctor -v
    echo
    
    print_banner "Flutter Precache"
    echo "run flutter precache command for linux"
    flutter precache --universal --linux
    echo
    
    echo "Flutter Linux GTK installed Successfully"
    echo
    print_banner "Final Checks:"
    doctor
    
    print_seperator
    
    echo
    echo
    echo "Flutter installation has been completed"
    echo
    echo "To be able to use it, you should restart your terminal  "
    echo "Or you can enter the following command: "
    echo
    echo "source ~/.bashrc"
    echo
    echo
}

uninstall() {
    print_banner "Uninstalling Flutter is not implemented yet"
}

kiosk(){
    set -e
    
    echo
    echo
    
    local possible_path="";
    
    # Check if the user provided a path to the executable file
    # If not, try to find if the user is in a flutter project
    # If the user is in a flutter project, try to find the executable file in the build folder
    if [ -z "$1" ]; then
        echo "Excutable file path not provided".
        echo
        
        # Check if the user is in a flutter project
        if [ -f "pubspec.yaml" ]; then
            echo "It seems you are in the root of a flutter project."
            echo
            
            # Check for the executable file with the same name as the current folder
            current_folder_name=$(basename "$PWD")
            
            local rebuild_excutable=1
            
            # Check if the current flutter project has fullscreen enabled in wayland
            if ! is_flutter_project_fullscreen && [ "$(current_display_manager)" == "wayland" ]; then
                echo "In the newest version of the Raspberry Pi OS, you have Wayland as the default display manager."
                echo "With Wayland, you can not run the app in fullscreen mode."
                echo "You should enable fullscreen in your Flutter project in my_application.cc file."
                echo
                
                read -p "Do you want to enable fullscreen in your Flutter project? (y/n): " choice
                
                if [ "$choice" = "y" ]; then
                    enable_flutter_project_fullscreen
                    echo
                    rebuild_excutable=0
                else
                    echo "Operation canceled."
                    echo
                fi
            fi
            
            # If we need to rebuild linux app bundle we will ask it from user
            if [ $rebuild_excutable == 0 ]; then
                echo "We changed your Flutter project full screen mode."
                
                read -p "Do you want to rebuild your Flutter project? (y/n): " choice
                
                if [ "$choice" = "y" ]; then
                    flutter build linux --release
                    
                    echo "Rebuild completed."
                    echo
                else
                    echo "Operation canceled."
                    echo
                    exit 1
                fi
            fi
            
            # Find the executable file in the build folder
            executable_path=$(find . -path "./build/linux/*/release/bundle/$current_folder_name" -type f -executable)
            
            if [ -x "$executable_path" ]; then
                echo "Found an executable file: $executable_path"
                echo
                # Prompt the user for confirmation
                read -p "Do you want to use this executable file? (y/n): " choice
                
                if [ "$choice" = "y" ]; then
                    possible_path=$executable_path
                else
                    echo "Operation canceled."
                    echo
                    exit 1
                fi
            fi
        fi
    else
        possible_path="$1"
    fi
    
    
    if [ -z "$possible_path" ]; then
        
        echo "
You should provide path to a excutable file or run this command in a flutter project.

Usage: kiosk <file_path>
to run the app bundle in kiosk mode you need to provide the exact path to the flutter app bundle
Example: kiosk /home/pi/app/build/linux/arm64/release/bundle/app

you can generate your file with the following command:

flutter build linux --release
        "
        
        return 1
    fi
    
    local app_path=$possible_path
    
    if ! is_executable_file_valid "$app_path"; then
        return 1
    fi
    
    # Use realpath to get the absolute path
    absolute_path=$(realpath "$app_path")
    
    echo "Provided File is a valid path: $app_path"
    
    # Check if the file is absolute path
    # If not, try to replace the relative path with the absolute path
    if [ "$absolute_path" != "$app_path" ]; then
        echo "But its not absolute path"
        echo "Try to replace the relative path with the absolute path"
        echo
        if ! is_executable_file_valid "$absolute_path"; then
            echo "The absolute path is not valid: $absolute_path"
            return 1
        fi
        app_path="$absolute_path"
        echo "New path for the excutable file: $app_path"
    fi
    echo
    
    print_seperator
    
    if ! check_autologin; then
        echo "Autologin is disabled we have to enable it."
        enable_autologin
    else
        echo "Autologin is already enabled"
    fi
    
    print_banner "Enable kiosk mode"
    
    if ! check_kiosk_packages; then
        echo "Install kiosk packages"
        install_packages "${kiosk_packages[@]}"
    else
        echo "Linux development dependencies are already installed"
        show_kiosk_packages_state
    fi
    echo
    
    # check $kiosk_home is available or not
    if [ ! -d "$kiosk_home" ]; then
        echo "Creating a kiosk directory in home "
        mkdir -p $kiosk_home
        echo
    else
        echo "The kiosk directory is already available in home."
        echo
    fi
    
    
    # check if kiosk.sh file is available or not
    if [ -f "$kiosk_file" ]; then
        echo "remove current kiosk.sh file and create a new one."
        sudo -E rm $kiosk_file
        echo
    fi
    
    echo "Creating file kiosk.sh file from template"
    sudo -E cp $snapp_home/kiosk.sh $kiosk_home/
    echo
    
    echo "Add Application path to kiosk.sh file"
    sed -i "s/# placeholder/$(echo "$app_path" | sed 's/\//\\\//g') \&/g" "$kiosk_file"
    echo
    
    print_seperator
    
    # check if the os is using x11 or wayland
    if [ "$(current_display_manager)" == "wayland" ]; then
        echo "Setup wayland kiosk mode"
        echo
        setup_wayland_kiosk "$kiosk_file"
    else
        echo "Setup X11 kiosk mode"
        echo
        setup_x11_kiosk "$kiosk_file"
    fi
    
    print_seperator
    
    echo
    echo
    echo "Kiosk mode has been enabled"
    echo "Reboot your device to see the changes"
    echo
    echo
    echo
}

disable_kiosk() {
    echo
    print_banner "Disable kiosk mode"

    # check if the os is using x11 or wayland
    if [ "$(current_display_manager)" == "wayland" ]; then
        echo "Disable wayland kiosk mode"
        echo

        # TODO: update xdotool with wtype
        local kiosk_command="snapp_kiosk=bash $kiosk_file && sleep 5"

        echo "kiosk command: $kiosk_command"

        local file="$wayland_user_autostart"
    
        # if kiosk command is in the file just remove it
        if grep -qF "$kiosk_command" "$file"; then
            echo "remove kiosk command from $file"
            sed -i "\|$kiosk_command|d" "$file"
            echo
            echo "Kiosk mode has been disabled"
            echo
        else
            echo "Kiosk mode is already disabled"    
        fi
    else
        echo "Disable X11 kiosk mode"
        echo
        if [ -f "$user_autostart" ]; then
            echo "remove current $user_autostart file"
            sudo -E rm $user_autostart
            echo
            echo "Kiosk mode has been disabled"
            echo
            sleep 3
            sudo -E reboot
        else
            echo "Kiosk mode is already disabled"
        fi
    fi

    sleep 3
    sudo -E reboot  
    
    
}

check_kiosk() {
    local kiosk_file="$kiosk_home/kiosk.sh"
    
    # TODO: check for the wayland kiosk mode
    
    if [ -f "$user_autostart" ]; then
        # Check if the line exists in the file
        if grep -qF "@bash $kiosk_file" "$user_autostart"; then
            return 0
        fi
    fi
    
    return 1
}

enable_autologin() {
    
    print_banner "Enable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B4
    
    echo "Auto Login enabled successfully"
}

disable_autologin() {
    print_banner "Disable Autologin"
    sudo -E raspi-config nonint do_boot_behaviour B3
    echo "Auto Login disabled successfully"
}

check_autologin() {
    return "$(sudo -E raspi-config nonint get_autologin)"
}

print_banner() {
    local message="${1:-Banner:}"
    local width=40  # Adjust the width of the banner as needed
    local border_char="*"
    
    # Calculate the padding length
    local padding_length=$((($width - ${#message}) / 2))
    
    
    # Create the middle part of the banner
    local middle_banner=""
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done
    middle_banner+=" $message "
    for ((i = 0; i < $padding_length; i++)); do
        middle_banner+="$border_char"
    done
    
    # Create the top border
    local border=""
    for ((i = 0; i < (${#middle_banner}); i++)); do
        border+="$border_char"
    done
    
    # Print the banner
    echo "$border"
    echo "$middle_banner"
    echo "$border"
}

print_seperator(){
    local width=40  # Adjust the width of the banner as needed
    local border_char="*"
    
    echo
    # prints $border_char $width times
    for ((i = 0; i <= width; i++)); do
        echo -n "*"
    done
    echo
    echo
}

check_dep_packages() {
    local all_installed=0 # Success (true)
    
    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break  # No need to check further once one package is not installed
        fi
    done
    
    return $all_installed
}

show_dep_packages_state(){
    local all_installed=0 # Success (true)
    
    for package in "${dep_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            echo "    * ✘ $package is missing"
        else
            echo "    * ✓ $package is installed"
        fi
    done
    
    return $all_installed
}

is_executable_file_valid(){
    local file_path="$1"
    
    # Check if the provided path exists
    if [ ! -e "$file_path" ]; then
        echo "File or directory does not exist: $file_path"
        return 1
    fi
    
    # Check if the provided path is a regular file (not a directory)
    if [ ! -f "$file_path" ]; then
        echo "Not a regular file: $file_path"
        return 1
    fi
    
    # Check if the file is executable
    if [ ! -x "$file_path" ]; then
        echo "File is not executable: $file_path"
        return 1
    fi
    
    return 0
}

check_dev_packages() {
    # List of packages to check
    
    local all_installed=0 # Success (true)
    
    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break  # No need to check further once one package is not installed
        fi
    done
    
    return $all_installed
}

show_dev_packages_state(){
    local all_installed=0
    for package in "${dev_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            echo "    * ✘ $package is missing"
        else
            echo "    * ✓ $package is installed"
        fi
    done
    
    return $all_installed
}

check_kiosk_packages() {
    
    local all_installed=0 # Success (true)
    
    for package in "${kiosk_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            all_installed=1 # Failure (false)
            break  # No need to check further once one package is not installed
        fi
    done
    
    return $all_installed
}

show_kiosk_packages_state(){
    local all_installed=0 # Success (true)
    
    for package in "${kiosk_packages[@]}"; do
        if ! dpkg -l | grep -q "ii  $package"; then
            echo "    * ✘ $package is missing"
        else
            echo "    * ✓ $package is installed"
        fi
    done
    
    return $all_installed
}

current_display_manager(){
    # we can find the display manager by this command
    # loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type
    local display_manager=""
    
    display_manager=$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type)
    
    # if the display manager variable contains the word "x11" then the display manager is x11
    if [[ $display_manager == *"x11"* ]]; then
        echo "x11"
        elif [[ $display_manager == *"wayland"* ]]; then
        echo "wayland"
    else
        echo "unknown"
    fi
}

# Function to check if fullscreen is enabled in the Flutter project
# It checks if the file contains the definition of gtk_window_fullscreen
is_flutter_project_fullscreen(){
    # Specify the file path
    local file_path="./linux/my_application.cc"
    
    # Check if the file exists
    if [ -f "$file_path" ]; then
        # Use grep to check if the file contains the definition of gtk_window_fullscreen
        if grep -q "gtk_window_fullscreen" "$file_path"; then
            return 0
        else
            return 1
        fi
    else
        echo "File does not exist: $file_path"
        return 1
    fi
}

# Function to enable fullscreen in the Flutter project
# It adds the definition of gtk_window_fullscreen to the file
enable_flutter_project_fullscreen(){
    if [ ! -f "pubspec.yaml" ]; then
        echo "You can only use this command in a Flutter project."
        echo "Could not find pubspec.yaml file."
        return 1
    fi
    
    if ! is_flutter_project_fullscreen; then
        echo
        echo "Enable fullscreen in your Flutter project"
        echo "Add Fullscreen command to my_application.cc file"
        echo
        
        local file_path="./linux/my_application.cc"
        local fullscreen_command="gtk_window_fullscreen(GTK_WINDOW(window));"
        
        if [ -f "$file_path" ]; then
            # Use sed to replace specific line with fullscreen command
            sed -i 's/^\(\s*\)gtk_window_set_default_size.*/\1'"$fullscreen_command"'/' "$file_path"
            
            echo "Fullscreen enabled in $file_path"
        else
            echo "File $file_path not found."
        fi
    else
        echo "Fullscreen is already enabled in your Flutter project"
    fi
    
}

setup_wayland_kiosk(){
    local kiosk_file="$1"
    
    local file="$wayland_user_autostart"

    # Check if the [wm-actions] section exists in the file
    if ! grep -q "\[wm-actions\]" "$file"; then
        # If it doesn't exist, add the section and the desired lines
        echo "[wm-actions]" >> "$file"
        echo "toggle_fullscreen = <alt> KEY_F11" >> "$file"
        echo >> "$file"  # Adding a blank line after the new entry
        echo "Added [wm-actions] section and toggle_fullscreen entry to $file"
    else
        # If the section already exists, check if the line is present
        if ! grep -q "\[wm-actions\]" "$file" || ! grep -q "toggle_fullscreen = <alt> KEY_F11" "$file"; then
            # If the line is not present or section is misplaced, add it to the existing [wm-actions] section
            sed -i '/^\[wm-actions\]/a toggle_fullscreen = <alt> KEY_F11\n' "$file"
            echo "Added toggle_fullscreen entry to the existing [wm-actions] section in $file"
        else
            echo "toggle_fullscreen entry already exists in [wm-actions] section in $file"
        fi
    fi
    
    local kiosk_command="snapp_kiosk=bash $kiosk_file && sleep 5"

    # Check if the line exists in the file 
    # and if it does, then do not add it again
    if grep -qF "[autostart]" "$file" && grep -qF "$kiosk_command" "$file"; then
        echo "kiosk mode is already available in $file"
        return 0
    fi
    
    # Check if the [autostart] section exists in the file
    if ! grep -q "\[autostart\]" "$file"; then
        # If it doesn't exist, add the section and the desired lines
        echo "[autostart]" >> "$file"
        echo "snapp_kiosk=bash $kiosk_file && sleep 5" >> "$file"
        echo >> "$file"  # Adding a blank line after the new entry
        echo "Added [autostart] section and snapp_kiosk entry to $file"
    else
        # If the section already exists, check if the line is present
        if ! grep -q "\[autostart\]" "$file" || ! grep -q "snapp_kiosk=bash $kiosk_file && sleep 5" "$file"; then
            # If the line is not present or section is misplaced, add it to the existing [autostart] section
            sed -i "/^\[autostart\]/a snapp_kiosk=bash $kiosk_file && sleep 5\n" "$file"
            echo "Added snapp_kiosk entry to the existing [autostart] section in $file"
        else
            echo "snapp_kiosk entry already exists in [autostart] section in $file"
        fi
    fi
}

setup_x11_kiosk(){
    local kiosk_file="$1"
    
    if [ ! -d "$user_autostart_dir" ]; then
        echo "Creating directory $user_autostart_dir"
        sudo -E mkdir -p $user_autostart_dir
        echo
    fi
    
    if [ -f "$user_autostart" ]; then
        echo "remove current user LXDE-pi/autostart file."
        sudo -E rm $user_autostart
        echo
    fi
    
    echo "Copy default autostart file to user autostart file"
    sudo -E cp $default_autostart $user_autostart_dir
    
    echo "Add following lines to the to user autostart file"
    echo "@bash $kiosk_file" | sudo tee -a $user_autostart
    echo "@sleep 5" | sudo tee -a $user_autostart
    echo "@xdotool key alt+F11" | sudo tee -a $user_autostart
}


# Function to install packages
install_packages() {
    local packages=("$@")
    
    # Update apt-get
    sudo -E apt update -y
    
    # Check if the argument is an array
    if [[ ! "$(declare -p packages 2>/dev/null)" =~ "declare -a" ]]; then
        echo "Error: Argument is not an array."
        return 1
    fi
    
    if [ ${#packages[@]} -eq 0 ]; then
        echo "No packages provided."
        return 0
    fi
    
    # Combine all package names into a single string
    local package_list="${packages[*]}"
    
    # Install all packages in one command
    sudo -E apt install -y $package_list
}

check_flutter_folder() {
    [ -e "$flutter_folder/bin/flutter" ]
    return $?
}

check_flutter_installed(){
    which flutter >/dev/null 2>&1
    return $?
}

check_flutter_in_path(){
    if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
        return 0
    else
        return 1
    fi
}

add_flutter_to_path(){
    if [ "$user_home" != "$HOME" ]; then
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$user_home/.bashrc"; then
            echo "we have flutter as env in ~/.bashrc."
        else
            echo "adding flutter to PATH as env in $user_home/.bashrc."
            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >> $user_home/.bashrc
            source $user_home/.bashrc
        fi
    else
        if grep -q "export PATH=\"\$PATH:$flutter_folder/bin\"" "$HOME/.bashrc"; then
            echo "we have flutter as env in $HOME/.bashrc."
        else
            echo "adding flutter to PATH as env in ~/.bashrc."
            echo "export PATH=\"\$PATH:$flutter_folder/bin\"" >> $HOME/.bashrc
            source $HOME/.bashrc
        fi
    fi
}

check_flutter_channel() {
    if which flutter >/dev/null 2>&1; then
        if flutter channel | grep -q "* $flutter_channel"; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

main "$@"